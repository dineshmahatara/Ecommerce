classRoom Code: t42axf3


- Node js 
- Web Tech 

    Client-Server Architecture 
    - Client    
        - Request create
        - Browser / Application 
    - Server
        - Response sender


Browser open 
    -> ur: www.facebook.com / google.com 


    protocol://domain.tld:portNo/params/...?querystring 


    https://www.youtube.com/watch/?v=videoid&time=1000


    http/ https => 80 / 443
    smtp - 25
    ftp - 21
    sftp - 22
    imap/pop => 465, 587
    local services => 3000
    

    0-2pow16 -1 
    0-65535

    a. DNS conversion 
        ip address 
            127.0.0.1
            localhost
    b. Sends a request 
        - get, post, put, patch, delete 
    c. Server Process the request   
        - url 
        - method 
        - payload
        -> Process / manipulate 
        - Response 
            -> API -> JSON 
            -> Integration -> HTML 

    d. Client Process the Response 
        - Status Code 
            - 1x-8x
            - 200, 201 
        - headers 
        - data 
        - browser response 

GIT 
    sprint 
        7-15 days 
        a team = 7-9 



New Changes for git 


    7 - 

Day 1 

A -------> 3 days index.js
B           ---------------> 5 days  index.js
C                           -------------------------> 7 days


Local / Development ===> Git service
online git => 
            gitlab 
            github
            bitbucket

// terminal => ssh-keygen command run 
// passphrase -> 
// .../.ssh/id_rsa.pub

// 23 memebrs 
## Local codes but not in the Repo
    => 

## I do not have codes on local, but repo exists
    =>

## Local codes exists as well as repo do exists
    => 


Trees 
    Node Trunk (main/ master) 
        branch 



Git commands
    -> git init 
        - to initialize git repo in local
        - this is one time command
    -> git remote add <name> <url>
        where <name> is the name for the <url>
            and <url> is repo link
    -> git add .
        - to add all the changes for staging 
    -> git commit -m "Your message"
        - to stage all the current changes

    -> git pull <remote_name> <remote_branch>
        - pulls the changes from remote 
    -> git push <remote_name> <local_branch>:<remote_branch>
        git push origin dev
    // dev => main
    
    // Sourcetree


Node js is not a  framework but it's a runtime environment

18-19, 12 >

node 
npm => Node package manager

-> string encrypt -> hash function 

date picker 
    -> 1000+

http package

MVC Pattern 
    - Model View Controller 


create an app in express to register and login a user using OTP.
- Create an endpoint to register a user 
    - stroe email, name, otp 
- Create an endpoint to login the user 
    - take email only as a input 
- Create an endpoint to verify OTP 
    - take otp and email as value
- create an endpoint to access only if logged in 

For Login Flow: 
    - ask user to input email 
    - Verify the email 
    - Generate a random number of 4 digit and update the selected user's table to store the otp
    - Send the OTP to email address of the user 
    - Verify the otp is of that user or not 
    - if otp verified build one middleware to verify the logged in user
    - Access the endpoint after login 

FOr the submission, 
    Create a repo on github, and assign the repo to this email: 
        sandesh.bhattarai79@gmail.com, 
    Push the changes with proper commit messages. 


=> Create server => 
    - Create a dir 
        - get in that dir
            - npm init 
            - npm i express 
        - create a 
                app.js 
                    - express require
                    - express app create 
                    - app port listen 
                package.json 
                    start "nodemon app.js"
                np start 
                - routes 
                    index.js
                        - router instance 
                            module.exports = router;
                        mount to app.js using middleware
                        - develop routes 
                            router.post('/register', );
                - app 
                    - controller 
                        auth.controller.js -> 
                        let data = [
                            {
                                name: "",
                                email: "a@b.com",
                                otp: "1234",
                            }
                        ]
                        class AuthController{
                            registerFunc = (req, res, next) => {
                                // email 
                                validate-> your email has been registered
                            }

                            loginFunc = (req, res, next) => {

                            }

                            verifyToken = (req, res, next) => {
                                email, otp 

                            }
                        }
CRUD operation 


start menu click 

    edit system envirio

Protocol 
    -> mysql => 3306, pgsql => 5432, 
    => mongodb => 27017
Host: 
    => locahost/127.0.0.1
Auth: 
    user: 
    password: 
DB Name: 
    ...

    mongodb://<username>:<password>@host:port/dbName?options
    e.g.
        mongodb://localhost:27017/mern15
    
CRUD Operations 
    -> Create
        - Db, Table, Data  
    -> Read 
        - Table Data 
    -> Update 
        - Data 
    -> Delete
        - Data


User: mern15
pwd: TxWG5O1vOWghFOOu

RDBMS 

orders 
----------
id  name        product         price       qty         amount          entered_by
-----------------------------------------------------------------------------------------
1   Ram         iPhone 12       120000      1           120000          Shyam 
-----------------------------------------------------------------------------------------
2   ram         iphone12        128000      2           200000          shyam 
-----------------------------------------------------------------------------------------
3   Ram         iphone12        120000      1           120000          shyam


users                           products 
----------                  -----------------------------------
id      name                id      name            price 
---------------             -----------------------------------
1       Ram                 1       iPhone 12       120000
---------------
2       Ram 
---------------
3       Shyam


orders 
-------------------------------------------------------------------------------------
id      user_id         product_id          qty         discount    entered_by_id
-------------------------------------------------------------------------------------
1       1               1                   1               0       3
-------------------------------------------------------------------------------------
2       2               1                   2               40000   3
-------------------------------------------------------------------------------------
3       1               1                   1               0       3


ODM => Object Document Modelling 
ORM => Object Relational Modelling 

=> 
    - Connection establishment with DB Serve 
    - Select DB 
    - Query in DB 
    - Data fetch/ endpoint

Core Driver, 
    => Mongodb 
ODM Provider
    => Mongoose


plural table name 
    - users 
Model name is always singular
    - User 

A row in a table 
    - is an instance of a model

Ecommerce 
    - To create a cart 
    - User Authorization and Authentication
    - Catelog Creation 
    - Product Creation
    - Product Atrributes 
    - Payment Gateways 
    - Offers 
    - Ads 
    - User Profile and Personalization 
    - Delivery 
    - Multivendor 

- Data 
    - Product
    - User 
    - Role 
    - Brand 
    - Images 
    - Category 
    - Inventory
    - Transactionn 
    - Offer 
    - Ads 


SDLC => Software Development Lifecycle 
    - Requirement gathering and analysis 
    - Design and Development 
        - Application Str 
        - Database Structure 
            - Schema Diagram
                - Entitiy 

- MIS Application 


Schema ===> 
    - Database design 
    - Collection
        - Data -> Document 
ORM 
ODM 
    - Table name => plural name 
        - users 
    - Model Name => singular name 
        - User 
    - Every row of a table is an instance of Model


JS based Library or Framework 
    - jquery 
    - react 

        - next js
    - vue 
    - angular 

DOM 
    - Document Object Model
        - Real DOM 
        - Virtual DOM 


React js Vs React Native
    - Components 

Nodejs


Input 
    type => 
        text, number, date, time, datetime, email, password, 
        url, button, reset, submit, file, hidden, radio, checkbox, 
        range, search, 


        text => string 
        email => string@string

Standard Division 
    default /extra small => < 576       => -
    small               => >= 576       => -sm
    medium              => >= 768px     => -md 
    large               => >= 992px     => -lg 
    extra large         => >= 1200px    => -xl 
    extra extra large   => >= 1400px    => -xxl

Every row has a 12 equal cols 
col-1 to col-12 
=> 
    sm => body => 540px => 100% 
    col-sm-1 to col-sm-12 
    => Col-sm-1 => 100%/12 => 8.86%
    => col-sm-2 => (100/12)*2 => 17.
    ....
    => col-sm-6 => 50% 
    => col-sm-12 => 100%

Form => Login / Register / Contact us 
List => 
    Card view 
    Table View 


React Stores: 
    * State 
        - inside a component the data is being stored
        - State can be assigned a new value/can be changed

    * Props 
        - incoming data to a component
        - props are read only data

Lifecycle 
    -> Mounting Phase 
    -> Updating Phase 
    -> Unmounting Phase

- constructor()
- render() 
- componentDidMount()


// Develop an api in BE 
delete => /product/:product_id/image/:name

=> Product Fetch from product_id
    let product = ProductModel.findById(req.params.product_id)
    let all_images = product.images
    let index = all_images.indexOf(req.params.name)
    if(index >= 0){
        all_images.splice(index, 1);
    }
    product.images = all_images;
    product.save();

// Two componoment 

// Add to cart/ProductDetail Component
Frist Component
    => Button (addtocart trigger)
        => Create am event which changes the state of MenuComponent
        => This event will be defined in the Reducer/Redux


// Cart Counter/ Menu component
Second Component
==> Store change listener / Redux 
    => Cart change 



// Store / Redux
cart => state 
    // Reducer 
        -> addToCart() => Listner
            -> changes/update the cart state


** Redux 
** React-Redux 
** Thunk / Middleware

** Redux-toolkit

// mongodb setup 

// VPS 
    // 5$/month
// Shared 
    // 10$/year 
    // 

// Home pae : 
    ** Category List in home page
        - active cats list
    ** Sliders Listing 
    ** Brand Listing 
    ** Brand wise Products 
    ** category wise Products  
    ** Product Detail from Slug
    ** Search products 
    ** Cart Create API 
    ** Order placement


// offer ==> time => starts and end date 
// list => 
        offer_end_date >= today's ===> running offer 
        offer_start_date > today's date  ===> Upcoming 
        offer_end_date < today's date => expired


        custom date range => offer list 
        from_date, to_date 
        offer_start_date >= from_date && offer_end_date <= to_date

npm 
yarn 

create react-app dir 
    => 